// This module operates only on the Mongo database.

module.exports = function(database_connection_string){

  var mongoose = require('mongoose');
  // test for database connection/only open if not present(allow modularity)
  if(!mongoose.connection.readyState){
    mongoose.connect(database_connection_string);
    var db = mongoose.connection;
    db.on('error', console.error.bind(console, 'connection error:'));
  }

  var util = require('./util')
  var User = require('../schemas/user').model;
  var CreditCard = require('../schemas/credit_card').model;


  var create_customer = function(username, stripe_id, stormpath_id, callback){
    var params = {
      username: username,
      service_id:{
        stripe: stripe_id,
        stormpath: stormpath_id
      }
    }
      User.create(params,function (err, user) {
        util.throw_or_log.call(this, err, user, callback);
      });
  };

  var fetch_customer = function(username, callback){
        User.findOne(
          { 'username': username },
          function (err, person) {
            util.throw_or_log.call(this, err, person, callback);
          }
        )
  }

  var delete_customer = function(username, callback){
    User.remove(
      { username: username },
      function (err, doc) {
        util.throw_or_log.call(this, err, doc, callback);
    });
  }

  // sets default_credit_card to the new credit card object(overwrites previous credit card objs.)
  // This accepts a credit card object generated by the  credit card factory(validated).
  // can remove a default credit card by setting this to empty string or null
  var update_default_credit_card = function(username, credit_card_object, callback){
    User.findOneAndUpdate(
      {username: username},
      {default_credit_card: credit_card_object},
      {new: true},
      function(err, user){
        util.throw_or_log.call(this, err, user, callback);
      }
    );
  }

  // brand, country, type are strings/ the rest are numbers (types are enforced by the ODM)
  var credit_card_factory=  function(brand, country, type, exp_month, exp_year, last4, zip, callback){

    cc = new CreditCard
    cc.brand =  brand;
    cc.country = country;
    cc.exp_month = exp_month;
    cc.exp_year = exp_year;
    cc.type = type;
    cc.last4 = last4;
    cc.zip = zip;

    validate = cc.validateSync()

    if (validate){
     return callback(validate)
    }
    else
    {
      return callback(false, cc);
    }

  }



  // sets default credit card to null
  var remove_default_credit_card = function(username, callback){
    User.findOneAndUpdate(
      {username: username},
      {default_credit_card: null},
      {new: true},
      function(err, user){
        util.throw_or_log.call(this, err, user, callback);
      }
    );
  }


  return {
    create_customer: create_customer,
    fetch_customer: fetch_customer,
    delete_customer: delete_customer,
    credit_card_factory: credit_card_factory,
    update_default_credit_card: update_default_credit_card,
    remove_default_credit_card: remove_default_credit_card
  }

}